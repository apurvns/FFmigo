name: Build and Release

on:
  release:
    types: [published]

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "Installed packages:"
        pip list
        
    - name: Build Windows executable
      run: |
        # Clean up any existing build artifacts
        Remove-Item -Recurse -Force build, dist, FFMigo.spec -ErrorAction SilentlyContinue
        echo "Current directory: $(Get-Location)"
        echo "Directory contents:"
        Get-ChildItem -Force
        echo "Building Windows executable..."
        python -m PyInstaller --onefile --windowed --icon=ui/resources/icons/app_logo.png --name=FFMigo --add-data=style.qss;. --add-data=ui/resources/icons;ui/resources/icons --add-data=backend;backend --add-data=ui;ui main.py
        echo "Build completed. Checking output:"
        if (Test-Path "dist/FFMigo.exe") {
          echo "✅ Windows executable created successfully"
          Get-ChildItem "dist/" -Recurse
        } else {
          echo "❌ Windows executable not found"
          Get-ChildItem "dist/" -ErrorAction SilentlyContinue
        }
        
    - name: Create Windows installer script
      run: |
        echo '@echo off' > install_windows.bat
        echo 'REM FFMigo Installer for Windows' >> install_windows.bat
        echo '' >> install_windows.bat
        echo 'echo 🚀 Installing FFMigo...' >> install_windows.bat
        echo '' >> install_windows.bat
        echo 'REM Create Program Files directory if it doesn''t exist' >> install_windows.bat
        echo 'if not exist "C:\Program Files\FFMigo" mkdir "C:\Program Files\FFMigo"' >> install_windows.bat
        echo '' >> install_windows.bat
        echo 'REM Copy the application' >> install_windows.bat
        echo 'xcopy "dist\FFMigo.exe" "C:\Program Files\FFMigo\" /Y' >> install_windows.bat
        echo '' >> install_windows.bat
        echo 'REM Create desktop shortcut' >> install_windows.bat
        echo 'echo Creating desktop shortcut...' >> install_windows.bat
        echo 'powershell "$WshShell = New-Object -comObject WScript.Shell; $Shortcut = $WshShell.CreateShortcut(''%%USERPROFILE%%\Desktop\FFMigo.lnk''); $Shortcut.TargetPath = ''C:\Program Files\FFMigo\FFMigo.exe''; $Shortcut.Save()"' >> install_windows.bat
        echo '' >> install_windows.bat
        echo 'echo ✅ FFMigo has been installed to C:\Program Files\FFMigo\' >> install_windows.bat
        echo 'echo 🎉 You can now launch FFMigo from your Desktop or Start Menu!' >> install_windows.bat
        echo 'pause' >> install_windows.bat
        
    - name: Create Windows README
      run: |
        echo '# FFMigo for Windows' > DISTRIBUTION_README_Windows.md
        echo '' >> DISTRIBUTION_README_Windows.md
        echo '## Installation' >> DISTRIBUTION_README_Windows.md
        echo '' >> DISTRIBUTION_README_Windows.md
        echo '### Automatic Installation' >> DISTRIBUTION_README_Windows.md
        echo '1. Download the FFMigo executable' >> DISTRIBUTION_README_Windows.md
        echo '2. Run: `install_windows.bat`' >> DISTRIBUTION_README_Windows.md
        echo '3. Launch FFMigo from Desktop or Start Menu' >> DISTRIBUTION_README_Windows.md
        echo '' >> DISTRIBUTION_README_Windows.md
        echo '### Manual Installation' >> DISTRIBUTION_README_Windows.md
        echo '1. Copy `FFMigo.exe` to your desired location' >> DISTRIBUTION_README_Windows.md
        echo '2. Run: `FFMigo.exe`' >> DISTRIBUTION_README_Windows.md
        echo '' >> DISTRIBUTION_README_Windows.md
        echo '## Requirements' >> DISTRIBUTION_README_Windows.md
        echo '- Windows 10 or later' >> DISTRIBUTION_README_Windows.md
        echo '- FFmpeg installed on the system' >> DISTRIBUTION_README_Windows.md
        echo '- Local LLM server (Ollama, LM Studio, etc.)' >> DISTRIBUTION_README_Windows.md
        echo '' >> DISTRIBUTION_README_Windows.md
        echo '## Features' >> DISTRIBUTION_README_Windows.md
        echo '- Drag-and-drop video loading' >> DISTRIBUTION_README_Windows.md
        echo '- Natural language video editing commands' >> DISTRIBUTION_README_Windows.md
        echo '- LLM integration for AI-powered editing' >> DISTRIBUTION_README_Windows.md
        echo '- Processed video preview and export' >> DISTRIBUTION_README_Windows.md
        echo '- Custom application icon' >> DISTRIBUTION_README_Windows.md
        echo '' >> DISTRIBUTION_README_Windows.md
        echo '## Troubleshooting' >> DISTRIBUTION_README_Windows.md
        echo '- If FFmpeg is not found, download from https://ffmpeg.org/' >> DISTRIBUTION_README_Windows.md
        echo '- Add FFmpeg to your system PATH' >> DISTRIBUTION_README_Windows.md
        echo '- For LLM issues, ensure your local LLM server is running' >> DISTRIBUTION_README_Windows.md
        
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: FFMigo-Windows
        path: |
          dist/FFMigo.exe
          install_windows.bat
          DISTRIBUTION_README_Windows.md

  build-macos:
    runs-on: macos-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "Installed packages:"
        pip list
        
    - name: Build macOS application
      run: |
        # Clean up any existing build artifacts
        rm -rf build dist FFMigo.spec
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        echo "Building macOS application..."
        python -m PyInstaller --onedir --windowed --icon=ui/resources/icons/app_logo.png --name=FFMigo --add-data=style.qss:. --add-data=ui/resources/icons:ui/resources/icons --add-data=backend:backend --add-data=ui:ui main.py
        echo "Build completed. Checking output:"
        if [ -d "dist/FFMigo" ]; then
          echo "✅ macOS application created successfully"
          ls -la dist/
          ls -la dist/FFMigo/
          
          # Create proper .app bundle structure
          echo "Creating .app bundle..."
          mkdir -p "dist/FFMigo.app/Contents/MacOS"
          mkdir -p "dist/FFMigo.app/Contents/Resources"
          cp -R "dist/FFMigo/"* "dist/FFMigo.app/Contents/MacOS/"
          cp "ui/resources/icons/app_logo.png" "dist/FFMigo.app/Contents/Resources/"
          
          # Create Info.plist
          cat > "dist/FFMigo.app/Contents/Info.plist" << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>FFMigo</string>
              <key>CFBundleIdentifier</key>
              <string>com.ffmigo.app</string>
              <key>CFBundleName</key>
              <string>FFMigo</string>
              <key>CFBundleDisplayName</key>
              <string>FFMigo</string>
              <key>CFBundleVersion</key>
              <string>1.0</string>
              <key>CFBundleShortVersionString</key>
              <string>1.0</string>
              <key>CFBundleIconFile</key>
              <string>app_logo.png</string>
              <key>LSMinimumSystemVersion</key>
              <string>10.14</string>
              <key>NSHighResolutionCapable</key>
              <true/>
          </dict>
          </plist>
          EOF
          
          echo "✅ .app bundle created successfully"
          ls -la dist/FFMigo.app/Contents/
        else
          echo "❌ macOS application not found"
          ls -la dist/ 2>/dev/null || echo "dist/ directory does not exist"
        fi
        
    - name: Create macOS installer script
      run: |
        echo '#!/bin/bash' > install_macos.sh
        echo '# FFMigo Installer for macOS' >> install_macos.sh
        echo '' >> install_macos.sh
        echo 'echo "🚀 Installing FFMigo..."' >> install_macos.sh
        echo '' >> install_macos.sh
        echo '# Create Applications directory if it doesn''t exist' >> install_macos.sh
        echo 'mkdir -p /Applications' >> install_macos.sh
        echo '' >> install_macos.sh
        echo '# Copy the application' >> install_macos.sh
        echo 'cp -R "dist/FFMigo.app" /Applications/' >> install_macos.sh
        echo '' >> install_macos.sh
        echo 'echo "✅ FFMigo has been installed to /Applications/"' >> install_macos.sh
        echo 'echo "🎉 You can now launch FFMigo from your Applications folder!"' >> install_macos.sh
        chmod +x install_macos.sh
        
    - name: Create macOS README
      run: |
        echo '# FFMigo for macOS' > DISTRIBUTION_README_macOS.md
        echo '' >> DISTRIBUTION_README_macOS.md
        echo '## Installation' >> DISTRIBUTION_README_macOS.md
        echo '' >> DISTRIBUTION_README_macOS.md
        echo '### Automatic Installation' >> DISTRIBUTION_README_macOS.md
        echo '1. Download the FFMigo application' >> DISTRIBUTION_README_macOS.md
        echo '2. Run: `./install_macos.sh`' >> DISTRIBUTION_README_macOS.md
        echo '3. Launch FFMigo from Applications folder' >> DISTRIBUTION_README_macOS.md
        echo '' >> DISTRIBUTION_README_macOS.md
        echo '### Manual Installation' >> DISTRIBUTION_README_macOS.md
        echo '1. Copy the `FFMigo.app` to your desired location' >> DISTRIBUTION_README_macOS.md
        echo '2. Run: `open FFMigo.app`' >> DISTRIBUTION_README_macOS.md
        echo '' >> DISTRIBUTION_README_macOS.md
        echo '## Requirements' >> DISTRIBUTION_README_macOS.md
        echo '- macOS 10.14 or later' >> DISTRIBUTION_README_macOS.md
        echo '- FFmpeg installed on the system' >> DISTRIBUTION_README_macOS.md
        echo '- Local LLM server (Ollama, LM Studio, etc.)' >> DISTRIBUTION_README_macOS.md
        echo '' >> DISTRIBUTION_README_macOS.md
        echo '## Features' >> DISTRIBUTION_README_macOS.md
        echo '- Drag-and-drop video loading' >> DISTRIBUTION_README_macOS.md
        echo '- Natural language video editing commands' >> DISTRIBUTION_README_macOS.md
        echo '- LLM integration for AI-powered editing' >> DISTRIBUTION_README_macOS.md
        echo '- Processed video preview and export' >> DISTRIBUTION_README_macOS.md
        echo '- Custom application icon' >> DISTRIBUTION_README_macOS.md
        echo '' >> DISTRIBUTION_README_macOS.md
        echo '## Troubleshooting' >> DISTRIBUTION_README_macOS.md
        echo '- If FFmpeg is not found, install it: `brew install ffmpeg`' >> DISTRIBUTION_README_macOS.md
        echo '- If the app doesn''t start, check that FFmpeg is in your PATH' >> DISTRIBUTION_README_macOS.md
        echo '- For LLM issues, ensure your local LLM server is running' >> DISTRIBUTION_README_macOS.md
        
    - name: Create DMG file
      run: |
        # Install create-dmg
        brew install create-dmg
        
        # Check what was actually created
        echo "Contents of dist/ directory:"
        ls -la dist/
        
        # Create DMG - using the .app bundle
        create-dmg \
          --volname "FFMigo" \
          --volicon "ui/resources/icons/app_logo.png" \
          --window-pos 200 120 \
          --window-size 600 400 \
          --icon-size 100 \
          --icon "FFMigo.app" 175 120 \
          --hide-extension "FFMigo.app" \
          --app-drop-link 425 120 \
          "FFMigo.dmg" \
          "dist/"
        
        echo "DMG creation completed. Checking result:"
        ls -la *.dmg 2>/dev/null || echo "No DMG file found"
        
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: FFMigo-macOS
        path: |
          dist/FFMigo.app
          FFMigo.dmg
          install_macos.sh
          DISTRIBUTION_README_macOS.md

  create-release:
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    steps:
    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: FFMigo-Windows
        path: windows-artifacts
        
    - name: Download macOS artifacts
      uses: actions/download-artifact@v4
      with:
        name: FFMigo-macOS
        path: macos-artifacts
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          windows-artifacts/FFMigo.exe
          windows-artifacts/install_windows.bat
          windows-artifacts/DISTRIBUTION_README_Windows.md
          macos-artifacts/FFMigo.app
          macos-artifacts/FFMigo.dmg
          macos-artifacts/install_macos.sh
          macos-artifacts/DISTRIBUTION_README_macOS.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 