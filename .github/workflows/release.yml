name: Build and Release

on:
  release:
    types: [published]

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "Installed packages:"
        pip list
        
    - name: Build Windows executable
      run: |
        # Clean up any existing build artifacts
        Remove-Item -Recurse -Force build, dist, FFMigo.spec -ErrorAction SilentlyContinue
        echo "Current directory: $(Get-Location)"
        echo "Directory contents:"
        Get-ChildItem -Force
        echo "Building Windows executable..."
        python build_windows.py
        echo "Build completed. Checking output:"
        if (Test-Path "dist/FFMigo.exe") {
          echo "✅ Windows executable created successfully"
          Get-ChildItem "dist/" -Recurse
        } else {
          echo "❌ Windows executable not found"
          Get-ChildItem "dist/" -ErrorAction SilentlyContinue
        }
        
        echo "=== Final check before upload ==="
        echo "Files in dist/:"
        Get-ChildItem "dist/" -Recurse
        echo "Files in current directory:"
        Get-ChildItem
        echo "Checking if install_windows.bat exists:"
        Test-Path "install_windows.bat"
        echo "Checking if DISTRIBUTION_README_Windows.md exists:"
        Test-Path "DISTRIBUTION_README_Windows.md"
        
    - name: Create Windows installer script (if not created by build script)
      run: |
        if (-not (Test-Path "install_windows.bat")) {
          echo '@echo off' > install_windows.bat
          echo 'REM FFMigo Installer for Windows' >> install_windows.bat
          echo '' >> install_windows.bat
          echo 'echo Installing FFMigo...' >> install_windows.bat
          echo '' >> install_windows.bat
          echo 'REM Create Program Files directory if it doesn''t exist' >> install_windows.bat
          echo 'if not exist "C:\Program Files\FFMigo" mkdir "C:\Program Files\FFMigo"' >> install_windows.bat
          echo '' >> install_windows.bat
          echo 'REM Copy the application' >> install_windows.bat
          echo 'xcopy "dist\FFMigo.exe" "C:\Program Files\FFMigo\" /Y' >> install_windows.bat
          echo '' >> install_windows.bat
          echo 'REM Create desktop shortcut' >> install_windows.bat
          echo 'echo Creating desktop shortcut...' >> install_windows.bat
          echo 'powershell "$WshShell = New-Object -comObject WScript.Shell; $Shortcut = $WshShell.CreateShortcut(''%%USERPROFILE%%\Desktop\FFMigo.lnk''); $Shortcut.TargetPath = ''C:\Program Files\FFMigo\FFMigo.exe''; $Shortcut.Save()"' >> install_windows.bat
          echo '' >> install_windows.bat
          echo 'echo FFMigo has been installed to C:\Program Files\FFMigo\' >> install_windows.bat
          echo 'echo You can now launch FFMigo from your Desktop or Start Menu!' >> install_windows.bat
          echo 'pause' >> install_windows.bat
        }
        
    - name: Create Windows README (if not created by build script)
      run: |
        if (-not (Test-Path "DISTRIBUTION_README.md")) {
          echo '# FFMigo for Windows' > DISTRIBUTION_README.md
          echo '' >> DISTRIBUTION_README.md
          echo '## Installation' >> DISTRIBUTION_README.md
          echo '' >> DISTRIBUTION_README.md
          echo '### Automatic Installation' >> DISTRIBUTION_README.md
          echo '1. Download the FFMigo executable' >> DISTRIBUTION_README.md
          echo '2. Run: `install_windows.bat`' >> DISTRIBUTION_README.md
          echo '3. Launch FFMigo from Desktop or Start Menu' >> DISTRIBUTION_README.md
          echo '' >> DISTRIBUTION_README.md
          echo '### Manual Installation' >> DISTRIBUTION_README.md
          echo '1. Copy `FFMigo.exe` to your desired location' >> DISTRIBUTION_README.md
          echo '2. Run: `FFMigo.exe`' >> DISTRIBUTION_README.md
          echo '' >> DISTRIBUTION_README.md
          echo '## Requirements' >> DISTRIBUTION_README.md
          echo '- Windows 10 or later' >> DISTRIBUTION_README.md
          echo '- FFmpeg installed on the system' >> DISTRIBUTION_README.md
          echo '- Local LLM server (Ollama, LM Studio, etc.)' >> DISTRIBUTION_README.md
          echo '' >> DISTRIBUTION_README.md
          echo '## Features' >> DISTRIBUTION_README.md
          echo '- Drag-and-drop video loading' >> DISTRIBUTION_README.md
          echo '- Natural language video editing commands' >> DISTRIBUTION_README.md
          echo '- LLM integration for AI-powered editing' >> DISTRIBUTION_README.md
          echo '- Processed video preview and export' >> DISTRIBUTION_README.md
          echo '- Custom application icon' >> DISTRIBUTION_README.md
          echo '' >> DISTRIBUTION_README.md
          echo '## Troubleshooting' >> DISTRIBUTION_README.md
          echo '- If FFmpeg is not found, download from https://ffmpeg.org/' >> DISTRIBUTION_README.md
          echo '- Add FFmpeg to your system PATH' >> DISTRIBUTION_README.md
          echo '- For LLM issues, ensure your local LLM server is running' >> DISTRIBUTION_README.md
        }
        
    - name: Debug - List files before Windows upload
      run: |
        echo "=== Files to be uploaded for Windows ==="
        echo "Checking dist/FFMigo.exe:"
        if (Test-Path "dist/FFMigo.exe") { Get-ChildItem "dist/FFMigo.exe" } else { echo "dist/FFMigo.exe NOT FOUND" }
        echo "Checking install_windows.bat:"
        if (Test-Path "install_windows.bat") { Get-ChildItem "install_windows.bat" } else { echo "install_windows.bat NOT FOUND" }
        echo "Checking DISTRIBUTION_README.md:"
        if (Test-Path "DISTRIBUTION_README.md") { Get-ChildItem "DISTRIBUTION_README.md" } else { echo "DISTRIBUTION_README.md NOT FOUND" }
        echo "=== All files in current directory ==="
        Get-ChildItem
        
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: FFMigo-Windows
        path: |
          dist/FFMigo.exe
          install_windows.bat
          DISTRIBUTION_README.md
        retention-days: 1

  build-macos:
    runs-on: macos-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "Installed packages:"
        pip list
        
    - name: Build macOS application
      run: |
        rm -rf build dist FFMigo.spec
        echo "Building macOS application..."
        python build_cross_platform.py
        echo "Build completed successfully!"
        echo "=== Final check before upload ==="
        echo "Files in dist/:"
        ls -la dist/
        echo "Files in current directory:"
        ls -la
        echo "Checking if install_macos.sh exists:"
        ls -la install_macos.sh 2>/dev/null || echo "install_macos.sh not found"
        echo "Checking if DISTRIBUTION_README_macOS.md exists:"
        ls -la DISTRIBUTION_README_macOS.md 2>/dev/null || echo "DISTRIBUTION_README_macOS.md not found"
        
    - name: Create macOS installer script (if not created by build script)
      run: |
        if [ ! -f "install_macos.sh" ]; then
          echo '#!/bin/bash' > install_macos.sh
          echo 'cp -R dist/FFMigo.app /Applications/' >> install_macos.sh
          echo 'chmod +x /Applications/FFMigo.app/Contents/MacOS/FFMigo' >> install_macos.sh
          chmod +x install_macos.sh
        fi
        
    - name: Create macOS README (if not created by build script)
      run: |
        if [ ! -f "DISTRIBUTION_README.md" ]; then
          echo '# FFMigo for macOS' > DISTRIBUTION_README.md
          echo '' >> DISTRIBUTION_README.md
          echo '## Installation' >> DISTRIBUTION_README.md
          echo '' >> DISTRIBUTION_README.md
          echo '### Automatic Installation' >> DISTRIBUTION_README.md
          echo '1. Download the FFMigo application' >> DISTRIBUTION_README.md
          echo '2. Run: `./install_macos.sh`' >> DISTRIBUTION_README.md
          echo '3. Launch FFMigo from Applications folder' >> DISTRIBUTION_README.md
          echo '' >> DISTRIBUTION_README.md
          echo '### Manual Installation' >> DISTRIBUTION_README.md
          echo '1. Copy the `FFMigo.app` bundle to your desired location' >> DISTRIBUTION_README.md
          echo '2. Run: `open FFMigo.app`' >> DISTRIBUTION_README.md
          echo '' >> DISTRIBUTION_README.md
          echo '## Requirements' >> DISTRIBUTION_README.md
          echo '- macOS 10.14 or later' >> DISTRIBUTION_README.md
          echo '- FFmpeg installed on the system' >> DISTRIBUTION_README.md
          echo '- Local LLM server (Ollama, LM Studio, etc.)' >> DISTRIBUTION_README.md
          echo '' >> DISTRIBUTION_README.md
          echo '## FFmpeg Installation' >> DISTRIBUTION_README.md
          echo 'FFMigo requires FFmpeg to be installed on your system. Here are the recommended installation methods:' >> DISTRIBUTION_README.md
          echo '' >> DISTRIBUTION_README.md
          echo '### Using Homebrew (Recommended)' >> DISTRIBUTION_README.md
          echo '```bash' >> DISTRIBUTION_README.md
          echo 'brew install ffmpeg' >> DISTRIBUTION_README.md
          echo '```' >> DISTRIBUTION_README.md
          echo '' >> DISTRIBUTION_README.md
          echo '### Using MacPorts' >> DISTRIBUTION_README.md
          echo '```bash' >> DISTRIBUTION_README.md
          echo 'sudo port install ffmpeg' >> DISTRIBUTION_README.md
          echo '```' >> DISTRIBUTION_README.md
          echo '' >> DISTRIBUTION_README.md
          echo '### Manual Installation' >> DISTRIBUTION_README.md
          echo '1. Download FFmpeg from https://ffmpeg.org/download.html' >> DISTRIBUTION_README.md
          echo '2. Extract and add to your PATH' >> DISTRIBUTION_README.md
          echo '' >> DISTRIBUTION_README.md
          echo '## Features' >> DISTRIBUTION_README.md
          echo '- Drag-and-drop video loading' >> DISTRIBUTION_README.md
          echo '- Natural language video editing commands' >> DISTRIBUTION_README.md
          echo '- LLM integration for AI-powered editing' >> DISTRIBUTION_README.md
          echo '- Processed video preview and export' >> DISTRIBUTION_README.md
          echo '- Custom application icon' >> DISTRIBUTION_README.md
          echo '' >> DISTRIBUTION_README.md
          echo '## Troubleshooting' >> DISTRIBUTION_README.md
          echo '- If FFmpeg is not found, install it using one of the methods above' >> DISTRIBUTION_README.md
          echo '- The app will automatically search for FFmpeg in common installation locations' >> DISTRIBUTION_README.md
          echo '- For LLM issues, ensure your local LLM server is running' >> DISTRIBUTION_README.md
          echo '- If the app doesn''t start, check that FFmpeg is properly installed' >> DISTRIBUTION_README.md
        fi
        
    - name: Create DMG file
      run: |
        # Install create-dmg
        brew install create-dmg
        
        # Check what was actually created
        echo "Contents of dist/ directory:"
        ls -la dist/
        
        # Create DMG - using the app bundle structure
        create-dmg \
          --volname "FFMigo" \
          --volicon "ui/resources/icons/app_logo.png" \
          --window-pos 200 120 \
          --window-size 600 400 \
          --icon-size 100 \
          --icon "FFMigo.app" 175 120 \
          --hide-extension "FFMigo.app" \
          --app-drop-link 425 120 \
          "FFMigo.dmg" \
          "dist/"
        
        echo "DMG creation completed. Checking result:"
        ls -la *.dmg 2>/dev/null || echo "No DMG file found"
        
    - name: Debug - List files before macOS upload
      run: |
        echo "=== Files to be uploaded for macOS ==="
        echo "Checking dist/FFMigo.app/:"
        ls -la dist/FFMigo.app/ 2>/dev/null || echo "dist/FFMigo.app/ NOT FOUND"
        echo "Checking FFMigo.dmg:"
        ls -la FFMigo.dmg 2>/dev/null || echo "FFMigo.dmg NOT FOUND"
        echo "Checking install_macos.sh:"
        ls -la install_macos.sh 2>/dev/null || echo "install_macos.sh NOT FOUND"
        echo "Checking DISTRIBUTION_README.md:"
        ls -la DISTRIBUTION_README.md 2>/dev/null || echo "DISTRIBUTION_README.md NOT FOUND"
        echo "=== All files in current directory ==="
        ls -la
        
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: FFMigo-macOS
        path: |
          dist/FFMigo.app/
          FFMigo.dmg
          install_macos.sh
          DISTRIBUTION_README.md
        retention-days: 1

  create-release:
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    steps:
    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: FFMigo-Windows
        path: windows-artifacts
        
    - name: Download macOS artifacts
      uses: actions/download-artifact@v4
      with:
        name: FFMigo-macOS
        path: macos-artifacts
        
    - name: Debug - List downloaded files
      run: |
        echo "=== Windows Artifacts ==="
        ls -la windows-artifacts/ 2>/dev/null || echo "No windows-artifacts directory"
        echo ""
        echo "=== macOS Artifacts ==="
        ls -la macos-artifacts/ 2>/dev/null || echo "No macos-artifacts directory"
        echo ""
        echo "=== Current Directory ==="
        ls -la
        echo ""
        echo "=== Find all files recursively ==="
        find . -name "FFMigo*" -type f 2>/dev/null || echo "No FFMigo files found"
        echo ""
        echo "=== Find all .exe files ==="
        find . -name "*.exe" 2>/dev/null || echo "No .exe files found"
        echo ""
        echo "=== Find all directories ==="
        find . -name "FFMigo" -type d 2>/dev/null || echo "No FFMigo directories found"
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          windows-artifacts/dist/FFMigo.exe
          windows-artifacts/install_windows.bat
          windows-artifacts/README_Windows.md
          macos-artifacts/dist/FFMigo.app/
          macos-artifacts/FFMigo.dmg
          macos-artifacts/install_macos.sh
          macos-artifacts/README_macOS.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Rename README files to avoid conflicts
      run: |
        echo "Renaming README files to avoid conflicts..."
        if [ -f "windows-artifacts/DISTRIBUTION_README.md" ]; then
          mv windows-artifacts/DISTRIBUTION_README.md windows-artifacts/README_Windows.md
        fi
        if [ -f "macos-artifacts/DISTRIBUTION_README.md" ]; then
          mv macos-artifacts/DISTRIBUTION_README.md macos-artifacts/README_macOS.md
        fi
        echo "README files renamed successfully"
        
    - name: Debug - Show what files were actually uploaded
      run: |
        echo "=== Files that should have been uploaded ==="
        echo "Windows files:"
        echo "- windows-artifacts/dist/FFMigo.exe"
        echo "- windows-artifacts/install_windows.bat"
        echo "- windows-artifacts/README_Windows.md"
        echo ""
        echo "macOS files:"
        echo "- macos-artifacts/dist/FFMigo/FFMigo"
        echo "- macos-artifacts/FFMigo.dmg"
        echo "- macos-artifacts/install_macos.sh"
        echo "- macos-artifacts/README_macOS.md" 